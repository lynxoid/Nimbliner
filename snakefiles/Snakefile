#
# Nimble aligner for short and long reads
# Darya Filippova, 2015-2016
#
# darya.filippova@gmail.com
#

# config: "experiments.json"

import sys
sys.path.append("py-src")

"""
"""
rule do_all_the_stuff:
	input:
		# expand("{work_dir}/{reference}/alignments/sampled_100_1000000.aligned", 
		# 			work_dir=config["work_dir"],
		# 			reference=config["reference"]),
		expand("{work_dir}/{reference}/analysis/sampled_{readlen}_{count}_eval.txt",
					zip,
					work_dir=[config["work_dir"] for i in range(4)],
					reference=[config["reference"] for i in range(4)],
					readlen=[100, 100, 300, 1000],
					count=[100, 1000000, 300000, 10000]
					)
	shell:
		"echo 'DONE'"

rule evaluate_alignment:
	input:
		align="{work_dir}/{reference}/alignments/{dataset}.aligned",
		script="py-src/stats.py"
	output:
		"{work_dir}/{reference}/analysis/{dataset}_eval.txt"
	run:
		import stats
		stats.compute_basic_stats(input.align, output[0])


rule align_reads:
	input:
		index="{work_dir}/{reference}/index/{reference}.index",
		stars="{work_dir}/{reference}/index/{reference}.star",
		reads="{work_dir}/{reference}/sampled/{dataset}.fa",
		binary="bin/mapper"
	output:
		"{work_dir}/{reference}/alignments/{dataset}.aligned"
	log:
		"{work_dir}/{reference}/log/align_{dataset}.log"
	params: K=config["K"]
	shell:
		"/usr/bin/time -lp ./{input.binary} query {params.K} {input.reads} {input.index} {input.stars} > {output} 2> {log}"


"""
Run the tool to build an index
"""
rule build_index:
	input:
		code=["include/reference_indexl.hpp", "src/sample_reads.cpp"],
		ref=expand("{input}/{reference}.fa", 
						input=config["input_dir"], 
						reference=config["reference"]),
		binary="bin/mapper"
	params: K=config["K"]
	log:
		"{work_dir}/{reference}/log/index_{reference}.log"
	output:
		index="{work_dir}/{reference}/index/{reference}.index",
		stars="{work_dir}/{reference}/index/{reference}.star"
	shell:
		"./{input.binary} index {params.K} {input.ref} 2> {log};"
		# drops all_kmers.txt and star_locations.txt files into the current dir
		"mv all_kmers.txt {output.index};"
		"mv star_locations.txt {output.stars}"


"""
Compile if any of the input file have changed
"""
rule compile_aligner:
	input:
		"src/kmer_location.cpp",
		"include/aligner.hpp",
		"include/reference_index.hpp"
	output:
		"bin/mapper"
	shell:
		"rm -f {output}; make mapper"



"""
Run the sampling w/o errors
"""
rule sample_reference_no_error:
	input:
		ref=expand("{input}/{reference}.fa", 
					input=config["input_dir"], 
					reference=config["reference"]),
		binary="bin/sample"
	output:
		"{work_dir}/{reference}/sampled/sampled_{R}_{N}.fa"
	log:
		"{work_dir}/{reference}/log/sample_{R}_{N}.log"
	shell:
		"./{input.binary} {wildcards.R} {wildcards.N} {input.ref} > {output} 2> {log};"
		# "ln -s {output} {wilcards.input}/sampled_{wildcards.R}_{wildcards.N}.fa"




"""
Compile if any of the input file have changed
"""
rule compile_sampler:
	input:
		"src/sample_reads.cpp",
	output:
		"bin/sample"
	shell:
		"rm -f {output}; make sample"


"""
Download PacBio lambda virus data
"""
rule download_pacbio_data:
	output:
	shell:
		"echo 'Download pacbio data'"

"""
Download illumina NA128... WGS dataset
"""
rule download_illumina_wgs_data:
	output:
		expand("")
	shell:
		"touch {output}"

"""
Download human chromosome (parametrized)
"""
rule download_human_chr:
	params: "ftp:long_url."
	shell:
		"echo 'download human chr'"